// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Text;
using UnityEngine;

public class TestinUIAutomator
{
	const int TESTIN_UIAUTOMATOR_PORT = 9464;
	const int TESTIN_UIAUTOMATOR_PORT_RANGE = 8;
	const string TESTIN_STATUSLINE_OK = "HTTP/1.1 200 OK\r\n";
	const string TESTIN_REPONSE_BODY_HTML_FORMAT = "<html><head><title>Testin-Unity3D-ObjectTree</title></head><body><p style='font:bold;font-size:24pt'>{0}</p></body></html>";
	const string TESTIN_REPONSE_HEADER_XML_FORMAT = "Content-type:text/xml;charset=UTF-8\r\nContent-Length:{0}\r\n";
	const string TESTIN_REPONSE_HEADER_HTML_FORMAT = "Content-type:text/html;charset=UTF-8\r\nContent-Length:{0}\r\n";

	private static ManualResetEvent allDone = new ManualResetEvent(false);
	public static AutoResetEvent initObjectInfo = new AutoResetEvent (false);
	private string strObjectInfo;
	private static TestinUIAutomator instance;
	public static bool isWait = false;

	private TestinUIAutomator ()
	{

	}

	public static TestinUIAutomator GetInstance()
	{
		if(instance == null)
		{
			instance = new TestinUIAutomator();
		}
		return instance;
	}

	public void Start()
	{
		Thread thread = new Thread(startServer);   
		thread.Start();
	}

	public void setStrObjectInfo(string str)
	{
		strObjectInfo = str;
	}

	private void startServer()
	{
		UnityEngine.Debug.Log ("start server !!!");
		IPAddress ipAddress = IPAddress.Parse("127.0.0.1");
		int port = TESTIN_UIAUTOMATOR_PORT;
		IPEndPoint localEndPoint = new IPEndPoint(ipAddress, port);
		Socket listener = new Socket(AddressFamily.InterNetwork,SocketType.Stream, ProtocolType.Tcp);

		bool isBindSuccess = false;

		while(!isBindSuccess)
		{
			localEndPoint = new IPEndPoint(ipAddress, port);
			try
			{
				UnityEngine.Debug.Log ("try to bind socket on port " + port);
				listener.Bind(localEndPoint);
				isBindSuccess = true;
				listener.Listen(20);
				while (true)
				{
					// Set the event to nonsignaled state.     
					allDone.Reset();
					// Start an asynchronous socket to listen for connections.
					UnityEngine.Debug.Log ("Waiting for a connection...");
					listener.BeginAccept(new AsyncCallback(AcceptCallback), listener);
					// Wait until a connection is made before continuing.     
					allDone.WaitOne();
				}
			}
			catch (Exception e)
			{
				UnityEngine.Debug.LogError ("failed to bind socket on port " + port);
				port++;
				if (port >= TESTIN_UIAUTOMATOR_PORT + TESTIN_UIAUTOMATOR_PORT_RANGE)
				{
					port = TESTIN_UIAUTOMATOR_PORT;
				}
			}
		}

	}

	private void AcceptCallback(IAsyncResult ar)
	{
		UnityEngine.Debug.Log("connecting..."); 
		// Signal the thread to continue. 
		allDone.Set();
		// Get the socket that handles the client request.     
		Socket listener = (Socket)ar.AsyncState;
		Socket clientsocket = listener.EndAccept(ar);

		// 输出客户端的地址  
		UnityEngine.Debug.Log ("Client Address is: " + clientsocket.RemoteEndPoint);  
		// 把客户端的请求数据读入保存到一个数组中  
		byte[] buffer =new byte[2048];  
			
		int receivelength = clientsocket.Receive(buffer, 2048, SocketFlags.None);  
		string requeststring = Encoding.UTF8.GetString(buffer, 0, receivelength);  
			
		// 在服务器端输出请求的消息  
		UnityEngine.Debug.Log ("request is " + requeststring);
		string strCMD = parseHTTPParam (requeststring);

		// 服务器端做出相应内容
		String responseHeader = "";
		string responseBody = "Command is not recognized or temporarily provide this functionality.";

		if (strCMD.Contains("DUMP") || strCMD.Contains("dump")) 
		{
			// dump response XML Data
			isWait = true;
			initObjectInfo.WaitOne ();
			responseBody = strObjectInfo;
//			responseBody = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>Unity3D</hello>";
			responseHeader = string.Format(TESTIN_REPONSE_HEADER_XML_FORMAT, responseBody.Length); 
			isWait = false;
		}
		else
		{
			// repsonse HTML Data
			responseBody = string.Format(TESTIN_REPONSE_BODY_HTML_FORMAT, responseBody);
			responseHeader = string.Format(TESTIN_REPONSE_HEADER_HTML_FORMAT, responseBody.Length);
		}

		//回应的状态行 
		byte[] statusLineBytes = Encoding.UTF8.GetBytes(TESTIN_STATUSLINE_OK);
		//回应的头部
		byte[] responseHeaderBytes = Encoding.UTF8.GetBytes(responseHeader); 
		byte[] responseBodyBytes = Encoding.UTF8.GetBytes(responseBody); 

		//发送状态信息
		clientsocket.Send(statusLineBytes);
		//发送回应头
		clientsocket.Send(responseHeaderBytes);
		//头部与内容的分割行
		clientsocket.Send(new byte[] { 13, 10 });
		//发送内容部分
		clientsocket.Send(responseBodyBytes);
			
		// 断开连接  
		clientsocket.Close(); 
	}

	private String parseHTTPParam(String request)
	{
		String[] requests = request.Split (new char[]{' '});

		if(requests == null || request.Length <= 1)
		{
			return "";
		}
	
		return requests[1];
	}

}


